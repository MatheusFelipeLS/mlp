15/03 - Testar 1D vector no lugar de array3D seq.

17/03 - Comparação de "seq" como 1D e 3D array:
        
        1o teste (Mais de 1h de intervalo):
        3D array
        rat99       1.75s
        pr152       6.39s
        gil262      42.82s

        1D array
        rat99       1.5s
        pr152       5.4s
        gil262      38.89s

        Obs: melhora aparente por volta de ~ -10%.

22/03 - Repetindo o teste anterior, porem adicionando mais instancias desta vez.

        2o teste
        1D Array

        rat99       1.525s
        pr152       5.442s
        gil262      38.93s
        lin318      48.70s 
        pr299       41.09s


        3D Array

        rat99       1.81s
        pr152       6.53s
        gil262      43.05s
        lin318      57.14s
        pr299       49.69s

        Obs: neste caso, a melhora aparenta ser de - 20%.

23/03 - Tentei compactar o layout do 1D array utilizando a seguinte conversão:

        i = 3*(x*(size+1) - (x*(x+1))/2 + y) + z;

        A performance assemelha-se à performance do 3D array.

07/04 - Testes q6 (processo praxedes rodando)
        1D array
        rat99       1.83s 
        pr152       6.64s
        gil262      48.22s
        lin318      67.91s
        pr299       58.74s

        3D array
        rat99       1.98s
        pr152       6.95s
        gil262      46.88s
        lin318      66.09s

07/04 - (q6) Comparacao entre Matriz e Array de structs
        Array
        rat99       1.76      
        pr152       6.34s
        gil262      44.33s
        lin318      61.44s
        pr299       54.04s

        Matriz
        rat99       1.72s      
        pr152       6.33s
        gil262      44.20s
        lin318      64.70s
        pr299       51.71s


REGEX - metodo getCost():
%s/info.cost\[\(solut.s\[[_a-z]*\]\)\]\[\(solut.s\[[_a-z]*\]\)\]/info.getCost(\1, \2)/gc
